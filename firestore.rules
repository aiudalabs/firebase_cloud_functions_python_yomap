rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Check if the user is authenticated
    function isAuthenticated() {
   		return request.auth != null;
    }
    
    // Check if the current user is the owner of the target profile
    function isProfileOwner(profileId) {
      return request.auth.uid == get(/databases/$(database)/documents/profiles/$(profileId)).data.userId;
    }
    
    // Profiles rules:
    // - All authenticated users can read
    // - Only the system can create and delete profiles (call to a firebase function)
    // - Only the profile owner and the system can update the data.
    match /profiles/{profileId} {
    	allow read: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create, delete: if false;

      // Blocked profiles
      match /blocked_profiles/{id} {
      	allow read, update, delete, create: if isAuthenticated() && isProfileOwner(profileId);
      }
      
      // Network
      match /network/{id} {
      	allow read: if isAuthenticated();
      	allow create, update, delete: if isAuthenticated() && isProfileOwner(profileId);
      }
      
      // Gallery
      match /gallery/{id} {
      	allow read: if isAuthenticated();
      	allow create, update, delete: if isAuthenticated() && isProfileOwner(profileId);
      }
      
      // Comments rules
      // TODO: Update these rules based on the {profileId} and the profile rules.
    	match /reviews/{id} {
    		allow read, create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && resource.data.fromUserId == request.auth.uid;
    	}

      // Internal notifications
      match /internal-notifications/{id} {
        allow create, delete, read, update: if isAuthenticated() && isProfileOwner(profileId);
    	}
      
      // Internal notifications updates
      match /internal-notifications-updates/{id} {
        allow create, delete, read: if isAuthenticated() && isProfileOwner(profileId);
    	}
    }

    // Tags rules
    // - Only the system can read, update and delete tags.
    match /tags/{tagId} {
    	allow create: if isAuthenticated();
    	allow read, update, delete: if false;
    }
    
    // Publications rules
    match /publications/{publication} {
      allow read, create: if isAuthenticated();
      allow delete, update: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Publications V2 rules
    match /publications-v2/{publication} {
      allow read, create: if isAuthenticated();
      allow delete, update: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Publications V3 rules
    match /publications-v3/{publication} {
      allow read, create: if isAuthenticated();
      allow delete, update: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    
    // Chat V2 rules
    match /channels-v2/{channelId} {
    	allow create, read, update, delete: if false;

      // Chat messages V2
      match /messages-v2/{message} {
				allow create, update, delete, read: if false;
    	}
    }

    // User Activities rules
    match /user-activities/{userActivity} {
    	allow create, read: if isAuthenticated();
      allow delete, update: if isAuthenticated() && resource.data.user_id == request.auth.uid;
      
      match /saved-notifications/{notification} {
        allow create, read, update, delete: if isAuthenticated() && userActivity == request.auth.uid;
      }
    }
    
    // User Tokens rules
    match /user-tokens/{userToken} {
    	allow create: if isAuthenticated();
      allow read, update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // New chat rules
    match /channels/{channelId} {
    	function userInMemberIds() {
      	return resource != null && resource.data != null && request.auth.uid in resource.data.member_ids;
      }
      
      function activeUserInMembers() {
      	return resource != null && resource.data != null && resource.data.members[request.auth.uid] != null && resource.data.members[request.auth.uid].active;
      }
    
    	allow create: if isAuthenticated() && request.auth.uid in request.resource.data.member_ids;
      allow read, update: if isAuthenticated() && (userInMemberIds() || activeUserInMembers());

      function isChannelMemberV2() {
        return request.auth.uid in get(/databases/$(database)/documents/channels/$(channelId)).data.member_ids;
      }

      // Chat messages V2
      match /messages/{message} {        
        function messageInChannel() {
        	return resource != null && resource.data != null && resource.data.channel_id == channelId;
        }

				allow create: if isAuthenticated() && isChannelMemberV2();
        allow read, update, delete: if isAuthenticated() && userInMemberIds() && messageInChannel();
        
        match /real-time-location/{rtLoc} {
        	allow create, read: if isAuthenticated() && isChannelMemberV2();
          allow update, delete: if isAuthenticated() && resource.data != null && resource.data.creatorId == request.auth.uid;
        }
    	}
    }
    
    // Report form rules. This collection can only be modified from firebase SDK or console.
    match /report-form/{form} {
    	allow read: if isAuthenticated();
    }
    
    // Reports collection rules. The reports cannot be modified or deleted.
    match /reports/{report} {
    	allow read, create: if isAuthenticated();
    }
    
    // Networks rules
    match /networks/{network} {
      function isUserInNetwork() {
      	return resource != null && resource.data != null && resource.data.members[request.auth.uid] != null;
      }
      allow update, delete: if isAuthenticated() && isUserInNetwork();
    	allow read, create: if isAuthenticated();
    }
  }
}